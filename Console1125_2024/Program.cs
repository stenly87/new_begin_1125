namespace MainProgram
{// другие пространства имен
 // классы
 // структуры
 // перечисления
 // делегаты

    namespace Second
    {
        // и тд
    }

    public class Program
    {
        public static void Main(string[] args)
        {   // точка начала исполнения приложения
            // переменная - ячейка для хранения данных
            // в одной области видимости не может быть
            // двух переменных с одним именем
            // у каждой переменной есть некоторый тип данных
            // тип данных - диапазон значений, которые 
            // может хранить переменная. тип данных задает 
            // требование к объему памяти, который будет
            // занимать переменная

            // типы данных можно разделить на 
            // ссылочные и значимые

            // ссылочные типы:
            // классы, object, массивы, строки, делегаты, 
            // события (event), 

            // значимые типы:
            // целые числа, дробные числа, символы, логический тип,
            // перечисления, структуры, 

            // класс - class
            // объект - object
            // массивы - тип[размерность]
            // строки - string
            // делегаты - delegate
            // события - event


            // целые числа
            // sbyte (1 -2^7 - (2^7-1)) short (2) int (4) long (8) - числа со знаком
            // byte (1) (0 - 2^8-1) ushort (2) uint (4) ulong (8)
            // дробные числа - числа с плавающей точкой, всегда со знаком
            // хранения дроби представляет собой 3 части - целая часть, знак, степень
            // всегда существует погрешность при хранении и доп вычисления 
            // при чтении/записи
            // float (4) double (8) decimal (16)
            // char 's' - 2 байта - UTF8 
            // bool - True False 
            // enum struct

            // операция присвоения = 
            // операция создания переменной
            // тип имя; Имя не может начинаться с цифры, не включает 
            // в себя пробелы и иные знаки кроме букв и знака _
            // имя переменных обычно с маленькой буквы или знака подчеркивания
            char c; // объявление переменной
            c = 'A'; // инициализация переменной
            char d = c; // копирование, поскольку тип значимый

            byte b = 10;
            int i = b; // неявное преобразование byte в int
            //b = i; b = 1 байт, i = 4 байта
            b = (byte)i; // явное преобразование типов, 3 байта будет отброшено

            float f = i;
            i = (int)f; // мы теряем остаток

            long l = i;

            string s = l.ToString(); // преобразование выглядит иначе
            i = int.Parse(s); // небезопасное преобразование
            bool result = int.TryParse(s, out i); // безопасное преобразование
            i = Convert.ToInt32(s); // аналог Parse
            i = BitConverter.ToInt32(new byte[] { 1, 2, 3, 4 });

            i = 1000;
            Console.WriteLine(i.ToString("x2")); // 16-ричный вывод
            byte[] bytes = BitConverter.GetBytes(i);
            /*foreach (var b1 in bytes)
            {
                Console.WriteLine(b1);
            }*/
            int charInt = 'g'; // мы получим индекс UTF8 для символа g
            // если один из аргументов при сложении является строкой
            // все остальные аргументы преобразуются в строку
            string s1 = 'п'.ToString() + 'р' + 'и' + 'в' + 'е' + 'т';
            Console.WriteLine(charInt);
            string ы = "ыыыыы"; // русский язык может использоваться 
            // в наименованиях, но к сожалению это неудобно
            Console.WriteLine(ы);
            // перечисления можно явно преобразовывать в целые числа
            // и обратно 

            // ссылочные типы объявляются также
            // но инициализация другая
            // пример инициализации класса
            // ключевое слово new указывает на создание
            // нового экземпляра класса Program
            // скобочки после Program указывают на вызов
            // конструктора. Пустые скобочки ставятся 
            // всегда, когда нет аргументов при создании 
            // объекта (или вызове метода)
            Program program = new Program();
            Program Program2 = program; // копирование ссылки

            // разница между ссылочными и значимыми типами:
            A a = new A { Value = 10 };
            A a2 = a; // копирование ссылки
            a2.Value = 100;
            Console.WriteLine(a.Value);
            Console.WriteLine(a2.Value);

            // структура значимый тип данных
            B b1 = new B { Value = 10 };
            B b2 = b1; // копирование значения
            b2.Value = 100;
            Console.WriteLine(b1.Value);
            Console.WriteLine(b2.Value);

            { // скобки обозначают рамки, в которых
              // задается область видимости и жизни переменных
                int i1 = 0; // переменная уничтожится в конце блока
            }
            // i1 = 10; // в данном контексте переменная i1 не существует

            //Main(args);
            // ; ставится в конце каждой строки кроме случаев,
            // когда строка предполагает тело, которое будет описано
            // дальше. Единственный вариант, когда ставится ; после
            // тела - это цикл do while




            // Ударцев (реферат на тему хранения дробей)
            // 




            // точка выхода из приложения
        }

        class A
        { 
            public int Value { get; set; }
        }

        struct B
        {
            public int Value { get; set; }
        }
    }
}